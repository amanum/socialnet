{"version":3,"sources":["hoc/withAuthRedirect.js","components/DialogsPage/DialogsPage.module.css","components/DialogsPage/Messages/Messages.module.css","components/DialogsPage/Messages/Message/Message.module.css","components/DialogsPage/Contacts/Contacts.module.css","components/DialogsPage/Contacts/Contact/Contact.module.css","components/DialogsPage/Messages/Message/Message.jsx","components/DialogsPage/Messages/Messages.jsx","components/DialogsPage/Messages/MessagesContainer.jsx","components/DialogsPage/Contacts/Contact/Contact.jsx","components/DialogsPage/Contacts/Contacts.jsx","components/DialogsPage/Contacts/ContactsContainer.jsx","components/DialogsPage/DialogsPage.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Message","className","s","AppDialogsMessagesItem","AppDialogsMessagesItemAvatar","src","avatar","alt","AppDialogsMessagesItemName","name","AppDialogsMessagesItemText","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","newMessage","Field","component","Textarea","placeholder","validate","required","meSendBtn","Messages","messages","messagesData","map","m","key","id","AppDialogsRight","AppDialogsMessages","values","addMessage","newMessageText","dispatchObj","compose","dialogsPage","Contact","path","AppDialogsItem","Contacts","contacts","contactsData","c","AppDialogsLeft","AppDialogsList","ContactsContainer","DialogsPage","AppDialogs","AppDialogsTitle","AppDialogsContent","MessagesContainer"],"mappings":"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","file":"static/js/3.ba8b9596.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if (!this.props.isAuth) {\r\n                return <Redirect to={'/login'}/>\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppDialogs\":\"DialogsPage_AppDialogs__18sDt\",\"AppDialogsTitle\":\"DialogsPage_AppDialogsTitle__29Zxv\",\"AppDialogsContent\":\"DialogsPage_AppDialogsContent__2o2JX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppDialogsRight\":\"Messages_AppDialogsRight__1Ym-U\",\"AppDialogsMessages\":\"Messages_AppDialogsMessages__1nIjR\",\"AppDialogsMessagesItem\":\"Messages_AppDialogsMessagesItem__1Claq\",\"AppDialogsMessagesItemAvatar\":\"Messages_AppDialogsMessagesItemAvatar__1SIaU\",\"AppDialogsMessagesItemText\":\"Messages_AppDialogsMessagesItemText__3Grkf\",\"newMessage\":\"Messages_newMessage__2LCma Posts_AppProfilePostsInput___Xb-K\",\"meSendBtn\":\"Messages_meSendBtn__1IR-I Posts_btn__3mPwc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppDialogsRight\":\"Message_AppDialogsRight__1oBz1\",\"AppDialogsMessages\":\"Message_AppDialogsMessages__1be-d\",\"AppDialogsMessagesItem\":\"Message_AppDialogsMessagesItem__25P2O\",\"AppDialogsMessagesItemAvatar\":\"Message_AppDialogsMessagesItemAvatar__12_22\",\"AppDialogsMessagesItemText\":\"Message_AppDialogsMessagesItemText__1WTUW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppDialogsLeft\":\"Contacts_AppDialogsLeft__38iLS\",\"AppDialogsList\":\"Contacts_AppDialogsList__2ZsuL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AppDialogsItem\":\"Contact_AppDialogsItem__10bcP\"};","import React from 'react';\r\nimport s from './Message.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Message = (props) => {\r\n\treturn (\r\n\t\t\t  <li className={s.AppDialogsMessagesItem}>\r\n\t\t\t\t  <div className={s.AppDialogsMessagesItemAvatar}>\r\n\t\t\t\t\t  <img src={props.avatar}\r\n\t\t\t\t\t\t\t alt=\"\"/>\r\n\t\t\t\t\t  <div className={s.AppDialogsMessagesItemName}>\r\n\t\t\t\t\t\t  {props.name}\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t  </div>\r\n\t\t\t\t  <div className={s.AppDialogsMessagesItemText}>\r\n\t\t\t\t\t  {props.message}\r\n\t\t\t\t  </div>\r\n\t\t\t  </li>\r\n\t);\r\n};\r\n\r\nMessage.propTypes = {\r\n\tname: PropTypes.string,\r\n\tmessage: PropTypes.string\r\n};\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Messages.module.css'\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../../utilites/validators\";\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\n\r\nconst Messages = (props) => {\r\n\r\n    let messages = props.messagesData.map(m => <Message key={m.id} avatar={m.avatar} name={m.name}\r\n                                                        message={m.message}/>)\r\n\r\n\tlet addNewMessage = (values) => {\r\n\t\tprops.addMessage(values.newMessageText)\r\n\t}\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <div className={s.AppDialogsRight}>\r\n            <ul className={s.AppDialogsMessages}>\r\n                {messages}\r\n            </ul>\r\n            <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.newMessage}>\r\n                <Field component={Textarea} name={'newMessageText'} placeholder={'Enter your message'} validate={[required, maxLength100]}/>\r\n                <button className={s.meSendBtn}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'messagesAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Messages;\r\n","import React from 'react';\r\nimport {\r\n    addMessage,\r\n} from \"../../../redux/dialogsReducer\";\r\nimport Messages from \"./Messages\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messagesData: state.dialogsPage.messagesData,\r\n        newMessageText: state.dialogsPage.newMessageText,\r\n    }\r\n}\r\n\r\nlet dispatchObj = {\r\n    addMessage,\r\n}\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, dispatchObj),\r\n\twithAuthRedirect,\r\n)(Messages);\r\n","import React from 'react';\r\nimport s from './Contact.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Contact = (props) => {\r\n\tlet path = `/dialogs/${props.id}`;\r\n\treturn (\r\n\t\t\t  <li className={s.AppDialogsItem}>\r\n\t\t\t\t  <NavLink to={path}>{props.name}</NavLink>\r\n\t\t\t  </li>\r\n\t);\r\n};\r\n\r\nContact.propTypes = {\r\n\tname: PropTypes.string\r\n};\r\n\r\nexport default Contact;\r\n","import React from 'react';\r\nimport s from './Contacts.module.css'\r\nimport Contact from \"./Contact/Contact\";\r\n\r\nconst Contacts = (props) => {\r\n\r\n\tlet contacts = props.contactsData.map(c => <Contact key={c.id} name={c.name} id={c.id} />);\r\n\t\r\n\treturn (\r\n\t\t\t  <div className={s.AppDialogsLeft}>\r\n\t\t\t\t  <ul className={s.AppDialogsList}>\r\n\t\t\t\t\t  {contacts}\r\n\t\t\t\t  </ul>\r\n\t\t\t  </div>\r\n\t\r\n\t);\r\n};\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport Contacts from \"./Contacts\";\r\n\r\n// const MessagesContainer = (props) => {\r\n//\r\n// \tlet state = props.store.getState();\r\n//\r\n// \tlet sendMessage = () => {\r\n// \t\tprops.store.dispatch(addMessageActionCreator())\r\n// \t}\r\n//\r\n// \tlet onMessageChange = (text) => {\r\n// \t\tprops.store.dispatch(updateNewMessageTextActionCreator(text))\r\n// \t}\r\n//\r\n// \treturn (\r\n// \t\t\t  <Messages messagesData={state.dialogsPage.messagesData}\r\n// \t\t\t\t\t\taddMessage={sendMessage}\r\n// \t\t\t\t\t\tonMessageChange={onMessageChange}\r\n// \t\t\t\t\t\tnewMessageText={state.dialogsPage.newMessageText}\r\n// \t\t\t  />\r\n// \t);\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tcontactsData: state.dialogsPage.contactsData\r\n\t}\r\n}\r\n\r\nconst ContactsContainer = connect(mapStateToProps, null)(Contacts)\r\n\r\nexport default ContactsContainer;\r\n","import React from 'react';\r\nimport s from './DialogsPage.module.css'\r\nimport MessagesContainer from \"./Messages/MessagesContainer\";\r\nimport ContactsContainer from \"./Contacts/ContactsContainer\";\r\n\r\nconst DialogsPage  = (props) => {\r\n\treturn (\r\n\t\t\t  <div className={s.AppDialogs}>\r\n\t\t\t\t  <h2 className={s.AppDialogsTitle}>\r\n\t\t\t\t\t Dialogs\r\n\t\t\t\t  </h2>\r\n\t\t\t\t  <div className={s.AppDialogsContent}>\r\n\t\t\t\t\t  <ContactsContainer />\r\n\t\t\t\t\t  <MessagesContainer/>\r\n\t\t\t\t  </div>\r\n\t\t\t  </div>\r\n\t);\r\n}\r\n\r\nexport default DialogsPage ;\r\n"],"sourceRoot":""}